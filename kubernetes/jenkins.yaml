---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jenkins-deployment
  labels:
    app: jenkins
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jenkins
  template:
    metadata:
      labels:
        app: jenkins
    spec:
      securityContext:
        fsGroup: 1000 
        runAsUser: 0
      # needed for dind (docker in docker) networking
      hostNetwork: true
      # needed to allow access to cluster's internal dns for services
      dnsPolicy: ClusterFirstWithHostNet
      containers:
        - name: jenkins
          image: jenkinsci/blueocean
          resources:
            requests:
              cpu: 500m
              memory: 588M
            limits:
              cpu: 500m
              memory: 588M
          volumeMounts:
          - mountPath: /var/jenkins_home
            name: jenkins-data
            subPath: var/jenkins_home
          - name: docker-socket
            mountPath: /var/run
          imagePullPolicy: IfNotPresent
        - name: docker
          image: docker:19.03.1
          command:
          - sleep
          args:
          - 99d
          volumeMounts:
          - mountPath: /var/jenkins_home
            name: jenkins-data
            subPath: var/jenkins_home
          - name: docker-socket
            mountPath: /var/run
        - name: docker-daemon
          image: docker:19.03.1-dind
          securityContext:
            privileged: true
          volumeMounts:
          - mountPath: /var/jenkins_home
            name: jenkins-data
            subPath: var/jenkins_home
          - name: docker-socket
            mountPath: /var/run
      volumes:
      - name: jenkins-data
        persistentVolumeClaim:
          claimName: jenkins-pvc
      - name: docker-socket
        emptyDir: {}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: jenkins-pvc
  namespace: default
  labels:
    app: jenkins
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: v1
kind: Service
metadata:
  name: jenkins-service
  labels:
    app: jenkins
spec:
  ports:
  - port: 80
    targetPort: 8080
    name: tcp
  selector:
    app: jenkins
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: jenkins-ingress
  labels:
    app: jenkins
  annotations:
    kubernetes.io/ingress.class: "traefik"
    traefik.ingress.kubernetes.io/redirect-entry-point: https
spec:
  tls:
    - secretName: internal-acme-crt-secret
      hosts:
        - '*.internal.lazz.tech'
  rules:
  - host: jenkins.internal.lazz.tech
    http:
      paths:
      - backend:
          serviceName: jenkins-service
          servicePort: 80