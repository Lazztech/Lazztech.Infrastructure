---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: drone-deployment
  labels:
    app: drone
spec:
  replicas: 1
  selector:
    matchLabels:
      app: drone
  template:
    metadata:
      labels:
        app: drone
    spec:
      containers:
        - name: drone
          image: drone/drone:1
          env:
          - name: DRONE_GITEA_SERVER
            value: "https://git.internal.lazz.tech"
          - name: DRONE_GITEA_CLIENT_ID
            valueFrom:
              secretKeyRef:
                name: drone
                key: gitea-client-id
          - name: DRONE_GITEA_CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                name: drone
                key: gitea-client-secret
          - name: DRONE_RPC_SECRET
            valueFrom:
              secretKeyRef:
                name: drone
                key: drone-rpc-secret
          - name: DRONE_SERVER_HOST
            value: "cicd.internal.lazz.tech"
          - name: DRONE_SERVER_PROTO
            value: "http"
          resources:
            requests:
              memory: "512Mi"
              cpu: "100m"
            limits:
              memory: "512Mi"
              cpu: "500m"
          ports:
          - containerPort: 80
          volumeMounts:
          - mountPath: /data
            name: drone-data
            subPath: drone-frontend-data
          imagePullPolicy: IfNotPresent
        - name: drone-runner
          image: drone/drone-runner-docker:1
          env:
          - name: DRONE_GITEA_SERVER
            value: "https://git.internal.lazz.tech"
          - name: DRONE_RPC_HOST
            value: "drone.default.svc.cluster.local"
          - name: DRONE_RPC_SECRET
            valueFrom:
              secretKeyRef:
                name: drone
                key: drone-rpc-secret
          - name: DRONE_RUNNER_CAPACITY
            value: "2"
          - name: DRONE_RUNNER_NAME
            value: "Micro8 Container Runner"
          resources:
            requests:
              memory: "512Mi"
              cpu: "100m"
            limits:
              memory: "512Mi"
              cpu: "500m"
          ports:
          - containerPort: 3000
          volumeMounts:
          - mountPath: /data
            name: drone-data
            subPath: data-runner-data
          imagePullPolicy: IfNotPresent
      volumes:
      - name: drone-data
        persistentVolumeClaim:
          claimName: drone-pvc
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: drone-pvc
  namespace: default
  labels:
    app: drone
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: v1
kind: Service
metadata:
  name: drone-service
  labels:
    app: drone
spec:
  ports:
  - port: 80
    targetPort: 80
    name: tcp
  selector:
    app: drone
---
apiVersion: v1
kind: Service
metadata:
  name: drone-runner-service
  labels:
    app: drone
spec:
  ports:
  - port: 80
    targetPort: 3000
    name: tcp
  selector:
    app: drone-runner
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: drone-ingress
  labels:
    app: drone
  annotations:
    kubernetes.io/ingress.class: "traefik"
    traefik.ingress.kubernetes.io/redirect-entry-point: https
spec:
  tls:
    - secretName: internal-acme-crt-secret
      hosts:
        - '*.internal.lazz.tech'
  rules:
  - host: cicd.internal.lazz.tech
    http:
      paths:
      - backend:
          serviceName: drone-service
          servicePort: 80